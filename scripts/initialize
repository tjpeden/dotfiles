#!/usr/bin/env bash
#
# Initialize this repository with your files.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

cd $HOME

set -e

echo ""

info() {
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

input() {
    printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success() {
    printf "\r\033[2K  [ \033[0;32mOK\033[0m ] $1\n"
}

failure() {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ""
    exit
}

capture() {
    local src=$1 dst="$DOTFILES_ROOT/$2"

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
            local current_src="$(readlink $src)"

            if [ "$current_src" == "$dst" ]
            then
                skip=true;
            else
                input "File already captured: $src ($(basename "$dst")), what do you want to do?\n\
              [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac
            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]
    then
        cp -r "$src" "$dst"
        success "captured $src to $dst"
    fi
}

capture_dotfiles() {
    info "capturing files"

    local overwrite_all=false backup_all=false skip_all=false

    if [ -f .gitconfig ]
    then
        capture .gitconfig git/gitconfig.symlink
    fi

    if [ -f .zshrc ]
    then
        capture .zshrc zsh/zshrc.symlink
    fi

    if [ -f .minttyrc ]
    then
        capture .minttyrc mintty/minttyrc.symlink
    fi

    if [ -d .atom ]
    then
        capture .atom/init.coffee atom.symlink/init.coffee
        capture .atom/config.cson atom.symlink/config.cson
        capture .atom/keymap.cson atom.symlink/keymap.cson
        capture .atom/snippets.cson atom.symlink/snippets.cson
        capture .atom/styles.less atom.symlink/styles.less
    fi

    if [ -d .vscode ]
    then
        capture .vscode/settings.json vscode.symlink/settings.json
        capture .vscode/keybindings.json vscode.symlink/keybindings.json
        capture .vscode/snippets vscode.symlink/snippets
    fi

    success "captured files"
}


info "initializing"
echo ""

capture_dotfiles

cd $DOTFILES_ROOT

echo ""
success "done"
